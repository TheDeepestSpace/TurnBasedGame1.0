# FINISH GAME B-TREE TASKS / CONDITIONS #

import finishGame:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.FinishGameTree.FinishGameTask"

import enemyExists?:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.FinishGameTree.EnemyExistsCondition"
import allyExists?:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.FinishGameTree.AllyExistsCondition"

subtree name:"finishGame"
    selector
        sequence
            invert
                enemyExists?
            finishGame reason:"no enemies found"
        sequence
            invert
                allyExists?
            finishGame reason:"no allies found"

# SUBTREE #1 TASKS / CONDITIONS #
# name: strategy1

import strategy1findClosestEnemy:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy1Tree.FindClosestEnemyTask"
import strategy1attackClosestEnemy:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy1Tree.AttackClosestEnemyTask"

subtree name:"strategy1"
    sequence
        strategy1findClosestEnemy
        strategy1attackClosestEnemy

# SUBTREE #2 TASKS / CONDITIONS #
# name: strategy2

import strategy2chooseRandomEntity:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy2Tree.ChooseRandomTargetTask"
import strategy2chosenDirection?:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy2Tree.ChosenDirectionCondition"
import strategy2chooseDirection:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy2Tree.ChooseDirectionTask"
import strategy2canMoveInChosenDirection?:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy2Tree.CanMoveInChosenDirectionCondition"
import strategy2move1TileInChosenDirection:"com.turnbasedgame.game.Actors.AI.Tasks.BehaviorTrees.Strategy2Tree.Move1TileInChosenDirectionTask"

subtree name:"strategy2"
    sequence
        strategy2chooseRandomEntity
        sequence
            selector
                sequence
                    strategy2chosenDirection?
                    strategy2canMoveInChosenDirection?
                untilSuccess
                    sequence
                        strategy2chooseDirection
                        strategy2canMoveInChosenDirection?
            strategy2move1TileInChosenDirection

# ROOT TASKS / CONDITIONS#

import finishTurn:"com.turnbasedgame.game.Actors.AI.Tasks.FinishTurnTask"

root
    sequence
        selector
            $finishGame
            sequence
                selector
                    $strategy1
                    $strategy2
                finishTurn